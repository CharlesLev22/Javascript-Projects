** start of undefined **

<!DOCTYPE html>
<html lang="en">

  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
    <meta charset="utf-8">
    <link rel="stylesheet" href="styles.css">
    <title>Palindrome Tester</title>
  </head>

  <body>

    <h1>Palindrome Tester</h1>
    <div id="testerbox">
      <div id="input">
        <label>Enter text below to check for</label>
        <h2>PALINDROMES:</h2>
        <input id="text-input" type="text" value="">
        <button id="check-btn" class="button">Test</button>
      </div>
      <div id="result" class="hidden"></div>
    </div>

    <div id="definition">
      <p><span>Palindrome </span>- a word, phrase, or sequence that reads the same backward as forward</p>
      <p id="examples"><span>Examples</span>: level, taco cat, 1934391</p>
    </div>

    <div id="challenge">
      <h2>Challenge</h2>
      <p>How many different palindromes are in the background?</p>
      <input id="howMany" type="number">
      <button id="check-btnTwo" class="button">Check</button>
      <div id="answer" class="hidden"></div>
    </div>

  <script src="script.js"></script>
  </body>
</html>

** end of undefined **

** start of undefined **

:root {
  --purpleOne: rgba(214,180,252,1);
  --purpleTwo: rgba(188,133,250,1);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-size: 10px;
  /* border: 1px solid black; */
}

body {
  font-family: Helvetica, serif;
  background-image: url("https://i.imgur.com/Ztvr6CG.gif");
  overflow: hidden;
  height: 100vh;
  width: 100vw;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  text-align: center;
}

h1 {
  width: min(100vw, 435px);
  border-radius: 5px;
  background: linear-gradient(180deg, var(--purpleTwo), var(--purpleOne));
  box-shadow: 0 0 15px black;
  margin-bottom: 15px;
  font-size: 5rem;
  font-family: serif;
  font-weight: bold;
  text-shadow: 0 0 2px white;
  padding: 20px; 
}

h2 {
  font-size: 2.5rem;
}

#testerbox {
  background: linear-gradient(180deg, var(--purpleOne), var(--purpleTwo));
  width: min(100vw, 500px);
  border-radius: 25px;
  padding: 20px;
  box-shadow: 0 0 15px black;
}

label {
  font-size: 2rem;
  display: flex;
  justify-content: center;
}

#testerbox h2{
  margin-top: 10px;
}

#text-input { 
  text-align: center;
  font-size: 2rem;
  margin: 15px 0px;
  height: 30px;
  width: 80%;
  border: none;
  background: transparent;
  border-bottom: 2px solid black;
}

.button {
  font-size: 1.75rem;
  padding: 3px 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin: auto;
}

.button:hover{
  background-color: gray;
  color: white;
}

.hidden {
  display: none;
}

#result p, strong, #answer p { 
  font-size: 1.75rem;
  margin: 15px 0;
  word-wrap: break-word;
}

#definition {
  background: linear-gradient(180deg, var(--purpleTwo), var(--purpleOne));
  padding: 15px;
  border-radius: 20px;
  margin-top: 15px;
  box-shadow: 0 0 15px black;
  width: min(100vw, 500px);
  display: block;
}

#definition p {
  font-size: 1.75rem;
}

p span {
  font-size: 2rem;
  font-weight: bold;
}

#examples {
  margin-top: 20px;
}

#challenge {
  background: linear-gradient(180deg, var(--purpleOne), var(--purpleTwo));
  width: min(100vw, 435px);
  margin-top: 15px;
  padding: 10px;
  border-radius: 15px;
  box-shadow: 0 0 15px black;
}

#challenge p, #challenge input {
  font-size: 1.5rem;
  margin: 15px 0;
}

#challenge input {
  height: 40px;
  width: 50px;
  background: transparent;
  border: 2px solid black;
  text-align: center;
}

#check-btnTwo {
  margin-top: 5px;
}

** end of undefined **

** start of undefined **

/* palindrome */

const palindromeInput = document.getElementById('text-input');
const checkPalindromeBtn = document.getElementById('check-btn');
const palindromeResult = document.getElementById('result');

const checkForPalindrome = palindromeInput => {
  const originalInput = palindromeInput;

  if (palindromeInput === '') {
    alert('Please input a value');
    return;
  }
  palindromeResult.replaceChildren();

const palindromeSimple = palindromeInput.replace(/[^A-Za-z0-9]/gi, '').toLowerCase();
console.log(palindromeSimple);
  let palindromeResultMsg = `<strong>${originalInput}</strong> ${
    palindromeSimple === [...palindromeSimple].reverse().join('') ? 'is' : 'is not'
  } a palindrome.`;

  const palindromeText = document.createElement('p');
  palindromeText.idName = 'user-input';
  palindromeText.innerHTML = palindromeResultMsg;
  palindromeResult.appendChild(palindromeText);

  palindromeResult.classList.remove('hidden');
};

checkPalindromeBtn.addEventListener('click', () => {
  checkForPalindrome(palindromeInput.value);
  palindromeInput.value = '';
});

/* challenge */

const challengeInput = document.getElementById('howMany');
const challengeCheck = document.getElementById('check-btnTwo');
const challengeAnswer = document.getElementById('answer');

const checkForChallenge = challengeInput => {
  const originalInput = challengeInput;

challengeAnswer.replaceChildren();

let challengeAnswerMsg = `<strong>${challengeInput}</strong> ${challengeInput === '23' ? 'is' : 'is not'} the right answer`;

challengeAnswer.classList.remove('hidden');

const challengeText = document.createElement('p');
  challengeText.idName = 'answer';
  challengeText.innerHTML = challengeAnswerMsg;
  challengeAnswer.appendChild(challengeText); 
};

  challengeCheck.addEventListener('click', () => {
  checkForChallenge(challengeInput.value);
  challengeInput.value = '';
});

** end of undefined **

